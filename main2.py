import telebot
from telebot import * 
from bs4 import BeautifulSoup as bs
import threading, requests
import phonenumbers
from phonenumbers import geocoder, carrier
import requests
import time

ID = '6069852039'
#osnova 6263167061:AAEzI8sRYcSXGGS6zywkU2wBjgoUPpx-XjI
#test 5815802755:AAHsvfyMba2S4qrU2KvpWJRU4wLD-B_Ym0g
bot = TeleBot('6263167061:AAEzI8sRYcSXGGS6zywkU2wBjgoUPpx-XjI')

@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=False, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º')
    itembtn2 = types.KeyboardButton('üë®üèª‚Äçüíª–ü–æ—à—É–∫ –ø–æ IPüë®üèª‚Äçüíª')
    itembtn3 = types.KeyboardButton('–ü–æ—à—É–∫ –ø–æ user ID')
    itembtn4 = types.KeyboardButton('‚òéÔ∏è–ü–æ—à—É–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É‚òéÔ∏è')
    itembtn5 = types.KeyboardButton('–ü–æ—à—É–∫ –ø–æ –Ü–ü–ù')
    itembtn6 = types.KeyboardButton('üü¢–ß–µ–∫ –æ–Ω–ª–∞–π–Ωüü¢')
    keyboard.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6)
    bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤—ñ—Ç! üëã
        –¶–µ –±–æ—Ç –¥–ª—è –±–æ—Ä–æ—Ç—å–±–∏ –∑ —Ä–æ—Å—ñ–π—Å—å–∫–æ-–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ç—Å—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ TikTok —ñ –Ω–µ —Ç—ñ–ª—å–∫–∏)''', reply_markup=keyboard)
    bot.register_next_step_handler(message, buttonhandler)

@bot.message_handler(content_types='text')
def buttonhandler(message):
    if message.text == '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º':
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º: \n –ó–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è! –ü—Ä–∏–π–º–∞—é—Ç—å—Å—è –ª–∏—à–µ –∞–∫–∫–∞—É–Ω—Ç–∏ –Ω–∞ —è–∫–∏—Ö —î –≤—ñ–¥–µ–æ –∑ –ª–∏—Ü–µ–º –∞–≤—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞') 
        bot.register_next_step_handler(message, step1)
    elif message.text == 'üë®üèª‚Äçüíª–ü–æ—à—É–∫ –ø–æ IPüë®üèª‚Äçüíª':
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å IP –∑–∞ —è–∫–∏–º –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫:') 
        bot.register_next_step_handler(message, step2)
    elif message.text == '–ü–æ—à—É–∫ –ø–æ user ID':
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ID —é–∑–µ—Ä–∞ —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –π–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç') 
        bot.register_next_step_handler(message, step3)
    elif message.text == '‚òéÔ∏è–ü–æ—à—É–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É‚òéÔ∏è':
        bot.send_message(message.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ —è–∫–∏–º –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ \nPs: –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ +38000000000')
        bot.register_next_step_handler(message, step4) 
    elif message.text == '–ü–æ—à—É–∫ –ø–æ –Ü–ü–ù':
        bot.send_message(message.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ü–ü–ù –∑–∞ —è–∫–∏–º –≤–∏ –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ \n –í–ê–ñ–õ–ò–í–û! –í–ø–∏—Å—É–π—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤!')
        bot.register_next_step_handler(message, step5)
    elif message.text == 'üü¢–ß–µ–∫ –æ–Ω–ª–∞–π–Ωüü¢':
        bot.send_message(message.chat.id, '–ü—Ä–∞—Ü—é—é))))')
    else: 
        bot.send_message(message.id, "–ü–æ–º–∏–ª–∫–∞!")
  
def step1(message):
    id_user = f"```\n{message.from_user.id}\n```"
    nickname = f"```\n{message.text}\n```"
    get = (f'–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω–Ω—ñ:' + '\nID: ' + id_user + '\n–ù—ñ–∫: ' + nickname)
    bot.send_message(ID, get, parse_mode='Markdown')
    bot.reply_to(message, f'–î—è–∫—É—é –∑–∞ –¥–æ–ø–æ–º–æ–≥—É –Ω–∞ –∫—ñ–±–µ—Ä—Ñ—Ä–æ–Ω—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏üòâ!')
  
def step2(message):
        ip = message.text
        res = requests.get('https://ipinfo.io/' + ip + '/json')
        r = res.json()
        if 'country' in r:
            country2 = ('\n[–ö—Ä–∞—ó–Ω–∞] : ' + r['country']) 
        else:
            country2 = '\n[–ö—Ä–∞—ó–Ω–∞] : –Ω–µ–≤—ñ–¥–æ–º–æ'
        if 'region' in r:
            region2 = ('\n[–†–µ–≥—ñ–æ–Ω] : ' + r['region'])
        else:
            region2 = '\n[–†–µ–≥—ñ–æ–Ω] : –Ω–µ–≤—ñ–¥–æ–º–æ'
        if 'city' in r:
            city2 = ('\n[–ú—ñ—Å—Ç–æ] : ' + r['city'])
        else:
            city2 = '\n[–ú—ñ—Å—Ç–æ] : –Ω–µ–≤—ñ–¥–æ–º–æ'
        if 'loc' in r:
            loc2 = ('\n[–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è] : ' + r['loc'])
        else:
            loc2 = '\n[–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è] : –Ω–µ–≤—ñ–¥–æ–º–æ'
        if 'org' in r:
            org2 = ('\n[–ü—Ä–æ–≤–∞–π–¥–µ—Ä] : ' + r['org'])
        else:
            org2 = '\n[–ü—Ä–æ–≤–∞–π–¥–µ—Ä] : –Ω–µ–≤—ñ–¥–æ–º–æ'
        if 'timezone' in r:
            timezone2 = ('\n[–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å] : ' + r['timezone'])
        else:
            timezone2 = '\n[–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å] : –Ω–µ–≤—ñ–¥–æ–º–æ'
        if 'postal' in r:
            postal2 = ('\n[–ü–æ—á—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å] : ' + r['postal'])
        else:
            postal2 = '\n[–ü–æ—á—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å] : –Ω–µ–≤—ñ–¥–æ–º–æ'
            info = country2 + region2 + city2 + loc2 + org2 + timezone2 + postal2
            bot.reply_to(message, info)
            
def step3(message):
    user_id = message.text
    final_id = ("tg://openmessage?user_id=" + user_id)
    bot.reply_to(message, final_id)
  
def step4(message):
    phone_number = message.text
    try:
        parsed_number = phonenumbers.parse(phone_number, None)
        is_valid = phonenumbers.is_valid_number(parsed_number)
        country = geocoder.description_for_number(parsed_number, 'en')
        service_provider = carrier.name_for_number(parsed_number, 'en')
        information1_number = ('[Country] : ' + country)
        information2_number = ('\n[Service provider] : ' + service_provider)
        information3_number = ('\n Viber: ' + 'msng.link/o?' + phone_number + '=vi')
        information4_number = ('\n Telegram: ' + 't.me/' + phone_number)
        information5_number = ('\n Whatsapp: ' + 'msng.link/o?' + phone_number + '=wa')
        information_social_number = information3_number + information4_number + information5_number
        information_global_number = information1_number + information2_number 
        information_number = information_global_number + information_social_number
        bot.reply_to(message, information_number)
    except phonenumbers.phonenumberutil.NumberParseException:
        bot.reply_to(message,'–ù–æ–º–µ—Ä –Ω–µ –≤—ñ—Ä–Ω–∏–π')

def step5(message):
    ipn_number = message.text
    k = len(ipn_number)
    k_number = 10
    if k == k_number:
        ipn_url = 'https://deltasoft.dp.ua/service/inn/?inn=' + ipn_number
        headers = {
            'headers':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36'
        }
        res = requests.post(ipn_url, headers=headers)
        soup = bs(res.text, "html.parser")
        vacancies_names = soup.find_all('p',class_='person')
        for name in vacancies_names:
            bot.send_message(message.chat.id, name.text.strip())
    else:
        bot.send_message(message.chat.id, '–ü–æ–º–∏–ª–∫–∞')


bot.infinity_polling()